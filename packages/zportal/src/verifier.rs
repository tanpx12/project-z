use ark_groth16::{prepare_verifying_key, verify_proof, Proof, VerifyingKey};
use serde::{Deserialize, Serialize};

use ark_bn254::{Bn254, Fq, Fq2, Fr, G1Affine, G1Projective, G2Affine, G2Projective};
use schemars::JsonSchema;
use std::str::FromStr;

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct Verifier {
    vk_json: String,
}

impl Verifier {
    pub fn new(vk_key: String) -> Self {
        // let vk_json = include_str!("../../../circuits/build/verification_key.json");

        // Self {
        //     vk_json: vk_json.to_string(),
        // }
        Self { vk_json: vk_key }
    }

    pub fn verify_proof(self, proof: Proof<Bn254>, inputs: &[Fr]) -> bool {
        let vk_json: VerifyingKeyJson = serde_json::from_str(&self.vk_json).unwrap();

        let vk = vk_json.to_verifying_key();
        let pvk = prepare_verifying_key(&vk);

        verify_proof(&pvk, &proof, &inputs).unwrap()
    }
}

#[derive(Serialize, Deserialize, Clone, PartialEq, JsonSchema, Debug)]
pub struct VerifyingKeyJson {
    #[serde(rename = "IC")]
    pub ic: Vec<Vec<String>>,

    // #[serde(rename = "nPublic")]
    // pub inputs_count: u32,
    pub vk_alpha_1: Vec<String>,
    pub vk_beta_2: Vec<Vec<String>>,
    pub vk_gamma_2: Vec<Vec<String>>,
    pub vk_delta_2: Vec<Vec<String>>,
    pub vk_alphabeta_12: Vec<Vec<Vec<String>>>,
    // pub curve: String,
    // pub protocol: String,
}

impl VerifyingKeyJson {
    pub fn to_verifying_key(self) -> VerifyingKey<Bn254> {
        let alpha_g1 = G1Affine::from(G1Projective::new(
            str_to_fq(&self.vk_alpha_1[0]),
            str_to_fq(&self.vk_alpha_1[1]),
            str_to_fq(&self.vk_alpha_1[2]),
        ));
        let beta_g2 = G2Affine::from(G2Projective::new(
            // x
            Fq2::new(
                str_to_fq(&self.vk_beta_2[0][0]),
                str_to_fq(&self.vk_beta_2[0][1]),
            ),
            // y
            Fq2::new(
                str_to_fq(&self.vk_beta_2[1][0]),
                str_to_fq(&self.vk_beta_2[1][1]),
            ),
            // z,
            Fq2::new(
                str_to_fq(&self.vk_beta_2[2][0]),
                str_to_fq(&self.vk_beta_2[2][1]),
            ),
        ));

        let gamma_g2 = G2Affine::from(G2Projective::new(
            // x
            Fq2::new(
                str_to_fq(&self.vk_gamma_2[0][0]),
                str_to_fq(&self.vk_gamma_2[0][1]),
            ),
            // y
            Fq2::new(
                str_to_fq(&self.vk_gamma_2[1][0]),
                str_to_fq(&self.vk_gamma_2[1][1]),
            ),
            // z,
            Fq2::new(
                str_to_fq(&self.vk_gamma_2[2][0]),
                str_to_fq(&self.vk_gamma_2[2][1]),
            ),
        ));

        let delta_g2 = G2Affine::from(G2Projective::new(
            // x
            Fq2::new(
                str_to_fq(&self.vk_delta_2[0][0]),
                str_to_fq(&self.vk_delta_2[0][1]),
            ),
            // y
            Fq2::new(
                str_to_fq(&self.vk_delta_2[1][0]),
                str_to_fq(&self.vk_delta_2[1][1]),
            ),
            // z,
            Fq2::new(
                str_to_fq(&self.vk_delta_2[2][0]),
                str_to_fq(&self.vk_delta_2[2][1]),
            ),
        ));

        let gamma_abc_g1: Vec<G1Affine> = self
            .ic
            .iter()
            .map(|coords| {
                G1Affine::from(G1Projective::new(
                    str_to_fq(&coords[0]),
                    str_to_fq(&coords[1]),
                    str_to_fq(&coords[2]),
                ))
            })
            .collect();

        VerifyingKey::<Bn254> {
            alpha_g1: alpha_g1,
            beta_g2: beta_g2,
            gamma_g2: gamma_g2,
            delta_g2: delta_g2,
            gamma_abc_g1: gamma_abc_g1,
        }
    }
}

pub fn str_to_fq(s: &str) -> Fq {
    Fq::from_str(s).unwrap()
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::msg::{CircomProof, PublicSignals};

    #[test]
    fn test_verifier() {
        let v = Verifier::new(r#"{
            "IC": [
              [
                "21726226774139070258214887671911321975735061870319425296750778337144292428884",
                "18246567690380915940131324997221190289084652680248086081724770702667893075653",
                "1"
              ],
              [
                "21016585187034943544276308301993009643435020173699305266857202546185712101052",
                "1958122134473116582133928891193463404253672897995444847308862754736349746017",
                "1"
              ],
              [
                "7662492830103806644569361641388651061924115783891857174593005311579717340204",
                "149945271670887960110299967394718453997640518490748076951765658673459396993",
                "1"
              ],
              [
                "19145794651963509990879844763827386145926591169857318992851889242951962969096",
                "2051632731071827765462204210827918050178937714071730818364685666967887936789",
                "1"
              ],
              [
                "16497642507332618970347503339494970774651862225352909971536814820558601434822",
                "8607295773286527409637974498539847446116904759380437484276234795056714368167",
                "1"
              ],
              [
                "21335780409584216755421747028082403805651487054625292271050875592276108530220",
                "586774942865210508983827012937811773895043623014426457346955316766213451787",
                "1"
              ]
            ],
            "vk_alfa_1": [
              "19876798840573311052069781186326120753744355548007765401648994479882501529977",
              "7356109404332404382729353805016470521148116312688330465740236442673733585995",
              "1"
            ],
            "vk_alpha_1": [
              "19876798840573311052069781186326120753744355548007765401648994479882501529977",
              "7356109404332404382729353805016470521148116312688330465740236442673733585995",
              "1"
            ],
            "vk_beta_2": [
              [
                "14179114877070894035632731726766731005374968151351526797219352160032008464890",
                "16398642870351178291450657625073361200678436874534056712938024383022261555896"
              ],
              [
                "17033053272038781979683198754428392212782290453507472078507380839431051567494",
                "10337241587219541641241182808123954873012138997719107081951461320020151686250"
              ],
              [
                "1",
                "0"
              ]
            ],
            "vk_gamma_2": [
              [
                "5544679135959590037932335726593875135209463657683405700292235057412152885327",
                "10745446469143255202531860330734993146380816885893469436029648181114870152244"
              ],
              [
                "6988358823759920853596987205528425562240962991232120124993163629840589523050",
                "4266308987333946215532787172735584115611420295790039468554398529618231341098"
              ],
              [
                "1",
                "0"
              ]
            ],
            "vk_delta_2": [
              [
                "15708678521563087178960173030811545417334006901345410718051752851717266625464",
                "17554461083352969011853646966917016144465093930274163979325377124576974149355"
              ],
              [
                "11626666774284381278588353137896612524334256942372606690907887083383595102217",
                "8159721236713010563735164933250847425537231021329554657166092857049292291773"
              ],
              [
                "1",
                "0"
              ]
            ],
            "vk_alfabeta_12": [
              [
                [
                  "16559256307195556909684878276726820400492278207220606721520155785961949080057",
                  "14523462861745885142136099751203223082808782870931618262158862059053168926551"
                ],
                [
                  "19919738229809492086265683856973231266567056456152182126142234327518644101949",
                  "15784103204193828475982277126738364134320325614103921158216604501641103516179"
                ],
                [
                  "1845925078417042599326634415215775874291583551089733857092599342492204163588",
                  "13689912852929415408706567121856747195006578307879215006546271523186252880433"
                ]
              ],
              [
                [
                  "9156916387089854685373850396993489380759295892065500773004989912873733505141",
                  "1130975499460127532001169640609782504474427458173748554695780783423184640577"
                ],
                [
                  "4176924627295241951223635591487701947971879635548749676418321412716167470369",
                  "4529464718635973552965996776537741532230527559081840903362626384578820333452"
                ],
                [
                  "15547641929889288950045542019394887684095703118126459025189400834345124899650",
                  "19596529875043857726330297405663009176599556253576817870817079663977572353418"
                ]
              ]
            ],
            "vk_alphabeta_12": [
              [
                [
                  "16559256307195556909684878276726820400492278207220606721520155785961949080057",
                  "14523462861745885142136099751203223082808782870931618262158862059053168926551"
                ],
                [
                  "19919738229809492086265683856973231266567056456152182126142234327518644101949",
                  "15784103204193828475982277126738364134320325614103921158216604501641103516179"
                ],
                [
                  "1845925078417042599326634415215775874291583551089733857092599342492204163588",
                  "13689912852929415408706567121856747195006578307879215006546271523186252880433"
                ]
              ],
              [
                [
                  "9156916387089854685373850396993489380759295892065500773004989912873733505141",
                  "1130975499460127532001169640609782504474427458173748554695780783423184640577"
                ],
                [
                  "4176924627295241951223635591487701947971879635548749676418321412716167470369",
                  "4529464718635973552965996776537741532230527559081840903362626384578820333452"
                ],
                [
                  "15547641929889288950045542019394887684095703118126459025189400834345124899650",
                  "19596529875043857726330297405663009176599556253576817870817079663977572353418"
                ]
              ]
            ],
            "curve": "BN254",
            "protocol": "groth",
            "nPublic": 5
          }"#.to_string());

        let proof = CircomProof::from(r#"{"pi_a":["6552461980235014125512485858574907252011786385287906273628562834862223432928","11860269414224780188951814911792416959087517485707388287639623625338071932162","1"],"pi_b":[["9681761101763472006554831866824970971123704940950423917193355053768804987946","5927707442728914367014416326038522894294769459332802500499248118399686183810"],["8311882933934792033033929758431827548593018661457980967793576235624041094075","9580190490647948836337327257463300132379241952918693313899161298407425234595"],["1","0"]],"pi_c":["14983953388384713833269817801465516661871057866090801236649846900102814228715","17793356028202487683602645872301205836685643881182882218786806260625920223574","1"],"protocol":"groth16","curve":"bn128"}"#.to_string())
            .to_proof();
        let public_signals = PublicSignals::from_json(r#"["12102025269368723514786154929741041693298912567371778248333614260822400991070","11026638163601698230824004152583421065610480743788604283266155961805787602581","0","0","0"]"#.to_string());

        let res = v.verify_proof(proof, &public_signals.get());

        println!("res: {}", res);
        assert!(res);
    }
}
