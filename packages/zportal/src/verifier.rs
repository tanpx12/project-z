use std::str::FromStr;

use ark_bn254::{Bn254, Fq, Fq2, Fr, G1Affine, G1Projective, G2Affine, G2Projective};
use ark_ff::{Fp256, QuadExtField};
use ark_groth16::{prepare_verifying_key, verify_proof, Proof, VerifyingKey};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct Verifier {
    vk_json: String,
}
impl Verifier {
    pub fn new(vk_json: String) -> Self {
        Self { vk_json }
    }

    pub fn verify_proof(self, proof: Proof<Bn254>, inputs: &[Fr]) -> bool {
        let vk_json: VerifyingKeyJson = serde_json::from_str(&self.vk_json).unwrap();

        let vk = vk_json.to_verifying_key();
        let pvk = prepare_verifying_key(&vk);

        verify_proof(&pvk, &proof, &inputs).unwrap()
    }
}
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct VerifyingKeyJson {
    #[serde(rename = "IC")]
    pub ic: Vec<Vec<String>>,
    pub vk_alpha_1: Vec<String>,
    pub vk_beta_2: Vec<Vec<String>>,
    pub vk_gamma_2: Vec<Vec<String>>,
    pub vk_delta_2: Vec<Vec<String>>,
    pub vk_alphabeta_12: Vec<Vec<Vec<String>>>,
}
impl VerifyingKeyJson {
    pub fn to_verifying_key(self) -> VerifyingKey<Bn254> {
        let alpha_g1 = G1Affine::from(G1Projective::new(
            str_to_fq(&self.vk_alpha_1[0]),
            str_to_fq(&self.vk_alpha_1[1]),
            str_to_fq(&self.vk_alpha_1[2]),
        ));
        let beta_g2 = G2Affine::from(G2Projective::new(
            // x
            Fq2::new(
                str_to_fq(&self.vk_beta_2[0][0]),
                str_to_fq(&self.vk_beta_2[0][1]),
            ),
            // y
            Fq2::new(
                str_to_fq(&self.vk_beta_2[1][0]),
                str_to_fq(&self.vk_beta_2[1][1]),
            ),
            // z,
            Fq2::new(
                str_to_fq(&self.vk_beta_2[2][0]),
                str_to_fq(&self.vk_beta_2[2][1]),
            ),
        ));

        let gamma_g2 = G2Affine::from(G2Projective::new(
            // x
            Fq2::new(
                str_to_fq(&self.vk_gamma_2[0][0]),
                str_to_fq(&self.vk_gamma_2[0][1]),
            ),
            // y
            Fq2::new(
                str_to_fq(&self.vk_gamma_2[1][0]),
                str_to_fq(&self.vk_gamma_2[1][1]),
            ),
            // z,
            Fq2::new(
                str_to_fq(&self.vk_gamma_2[2][0]),
                str_to_fq(&self.vk_gamma_2[2][1]),
            ),
        ));

        let delta_g2 = G2Affine::from(G2Projective::new(
            // x
            Fq2::new(
                str_to_fq(&self.vk_delta_2[0][0]),
                str_to_fq(&self.vk_delta_2[0][1]),
            ),
            // y
            Fq2::new(
                str_to_fq(&self.vk_delta_2[1][0]),
                str_to_fq(&self.vk_delta_2[1][1]),
            ),
            // z,
            Fq2::new(
                str_to_fq(&self.vk_delta_2[2][0]),
                str_to_fq(&self.vk_delta_2[2][1]),
            ),
        ));

        let gamma_abc_g1: Vec<G1Affine> = self
            .ic
            .iter()
            .map(|coords| {
                G1Affine::from(G1Projective::new(
                    str_to_fq(&coords[0]),
                    str_to_fq(&coords[1]),
                    str_to_fq(&coords[2]),
                ))
            })
            .collect();

        VerifyingKey::<Bn254> {
            alpha_g1: alpha_g1,
            beta_g2: beta_g2,
            gamma_g2: gamma_g2,
            delta_g2: delta_g2,
            gamma_abc_g1: gamma_abc_g1,
        }
    }
}

pub fn str_to_fq(s: &str) -> Fq {
    Fq::from_str(s).unwrap()
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct CircomProof {
    #[serde(rename = "pi_a")]
    pub pi_a: Vec<String>,
    #[serde(rename = "pi_b")]
    pub pi_b: Vec<Vec<String>>,
    #[serde(rename = "pi_c")]
    pub pi_c: Vec<String>,
}

impl CircomProof {
    pub fn from(json_str: String) -> Self {
        serde_json::from_str(&json_str).unwrap()
    }

    pub fn to_proof(self) -> Proof<Bn254> {
        let a = G1Affine::new(
            Fp256::from_str(&self.pi_a[0]).unwrap(),
            Fp256::from_str(&self.pi_a[1]).unwrap(),
            false,
        );
        let b = G2Affine::new(
            QuadExtField::new(
                Fp256::from_str(&self.pi_b[0][0]).unwrap(),
                Fp256::from_str(&self.pi_b[0][1]).unwrap(),
            ),
            QuadExtField::new(
                Fp256::from_str(&self.pi_b[1][0]).unwrap(),
                Fp256::from_str(&self.pi_b[1][1]).unwrap(),
            ),
            false,
        );

        let c = G1Affine::new(
            Fp256::from_str(&self.pi_c[0]).unwrap(),
            Fp256::from_str(&self.pi_c[1]).unwrap(),
            false,
        );
        Proof { a, b, c }
    }
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PublicSignals(pub Vec<String>);

impl PublicSignals {
    pub fn from(public_signals: Vec<String>) -> Self {
        PublicSignals(public_signals)
    }

    pub fn from_json(public_signals_json: String) -> Self {
        let v: Vec<String> = serde_json::from_str(&public_signals_json).unwrap();
        PublicSignals(v)
    }

    pub fn get(self) -> Vec<Fr> {
        let mut inputs: Vec<Fr> = Vec::new();
        for input in self.0 {
            inputs.push(Fr::from_str(&input).unwrap());
        }
        inputs
    }
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_verifier_ptrans() {
        let v = Verifier::new(
            r#"
      {
          "IC": [
            [
              "21726226774139070258214887671911321975735061870319425296750778337144292428884",
              "18246567690380915940131324997221190289084652680248086081724770702667893075653",
              "1"
            ],
            [
              "21016585187034943544276308301993009643435020173699305266857202546185712101052",
              "1958122134473116582133928891193463404253672897995444847308862754736349746017",
              "1"
            ],
            [
              "7662492830103806644569361641388651061924115783891857174593005311579717340204",
              "149945271670887960110299967394718453997640518490748076951765658673459396993",
              "1"
            ],
            [
              "19145794651963509990879844763827386145926591169857318992851889242951962969096",
              "2051632731071827765462204210827918050178937714071730818364685666967887936789",
              "1"
            ],
            [
              "16497642507332618970347503339494970774651862225352909971536814820558601434822",
              "8607295773286527409637974498539847446116904759380437484276234795056714368167",
              "1"
            ],
            [
              "21335780409584216755421747028082403805651487054625292271050875592276108530220",
              "586774942865210508983827012937811773895043623014426457346955316766213451787",
              "1"
            ]
          ],
          "vk_alfa_1": [
            "19876798840573311052069781186326120753744355548007765401648994479882501529977",
            "7356109404332404382729353805016470521148116312688330465740236442673733585995",
            "1"
          ],
          "vk_alpha_1": [
            "19876798840573311052069781186326120753744355548007765401648994479882501529977",
            "7356109404332404382729353805016470521148116312688330465740236442673733585995",
            "1"
          ],
          "vk_beta_2": [
            [
              "14179114877070894035632731726766731005374968151351526797219352160032008464890",
              "16398642870351178291450657625073361200678436874534056712938024383022261555896"
            ],
            [
              "17033053272038781979683198754428392212782290453507472078507380839431051567494",
              "10337241587219541641241182808123954873012138997719107081951461320020151686250"
            ],
            [
              "1",
              "0"
            ]
          ],
          "vk_gamma_2": [
            [
              "5544679135959590037932335726593875135209463657683405700292235057412152885327",
              "10745446469143255202531860330734993146380816885893469436029648181114870152244"
            ],
            [
              "6988358823759920853596987205528425562240962991232120124993163629840589523050",
              "4266308987333946215532787172735584115611420295790039468554398529618231341098"
            ],
            [
              "1",
              "0"
            ]
          ],
          "vk_delta_2": [
            [
              "15708678521563087178960173030811545417334006901345410718051752851717266625464",
              "17554461083352969011853646966917016144465093930274163979325377124576974149355"
            ],
            [
              "11626666774284381278588353137896612524334256942372606690907887083383595102217",
              "8159721236713010563735164933250847425537231021329554657166092857049292291773"
            ],
            [
              "1",
              "0"
            ]
          ],
          "vk_alfabeta_12": [
            [
              [
                "16559256307195556909684878276726820400492278207220606721520155785961949080057",
                "14523462861745885142136099751203223082808782870931618262158862059053168926551"
              ],
              [
                "19919738229809492086265683856973231266567056456152182126142234327518644101949",
                "15784103204193828475982277126738364134320325614103921158216604501641103516179"
              ],
              [
                "1845925078417042599326634415215775874291583551089733857092599342492204163588",
                "13689912852929415408706567121856747195006578307879215006546271523186252880433"
              ]
            ],
            [
              [
                "9156916387089854685373850396993489380759295892065500773004989912873733505141",
                "1130975499460127532001169640609782504474427458173748554695780783423184640577"
              ],
              [
                "4176924627295241951223635591487701947971879635548749676418321412716167470369",
                "4529464718635973552965996776537741532230527559081840903362626384578820333452"
              ],
              [
                "15547641929889288950045542019394887684095703118126459025189400834345124899650",
                "19596529875043857726330297405663009176599556253576817870817079663977572353418"
              ]
            ]
          ],
          "vk_alphabeta_12": [
            [
              [
                "16559256307195556909684878276726820400492278207220606721520155785961949080057",
                "14523462861745885142136099751203223082808782870931618262158862059053168926551"
              ],
              [
                "19919738229809492086265683856973231266567056456152182126142234327518644101949",
                "15784103204193828475982277126738364134320325614103921158216604501641103516179"
              ],
              [
                "1845925078417042599326634415215775874291583551089733857092599342492204163588",
                "13689912852929415408706567121856747195006578307879215006546271523186252880433"
              ]
            ],
            [
              [
                "9156916387089854685373850396993489380759295892065500773004989912873733505141",
                "1130975499460127532001169640609782504474427458173748554695780783423184640577"
              ],
              [
                "4176924627295241951223635591487701947971879635548749676418321412716167470369",
                "4529464718635973552965996776537741532230527559081840903362626384578820333452"
              ],
              [
                "15547641929889288950045542019394887684095703118126459025189400834345124899650",
                "19596529875043857726330297405663009176599556253576817870817079663977572353418"
              ]
            ]
          ],
          "curve": "BN254",
          "protocol": "groth",
          "nPublic": 5
        }
      "#
            .to_string(),
        );
        let proof = CircomProof::from(r#"
      {
          "protocol": "groth",
          "proof": "15c1e1694c6b7ea9efccda1e12f0c9cb560309239e4665fa1f4b1fdbdb764d1a840f3f6cc1a29a65311bec959c969f8f465f6703ad36a6ddfe8459d1d92c7c043df85091451835da03a48fdc4ed8afa4da0ac30ca38830dc92763b342161f90bfdabb741eda90950898efab57fe5867fd19a4247d26786a38d3c5ac8e1509f06107df1576fac05dd011efadfac26dadf0dffabe4b5c57a23582c38328652fb2698df4d4e61cf7bcc89b2127ee1264b250303d68038230d1a4d6fd12ffe94591d977e49698ca96a4214e1fefec99b6dac4fcb46e5487ea75c91c7912374069a",
          "pi_a": [
    "4588365436250289391755604207342267941446007419656212063649919918508172125195",
    "21060376463470030457578304649868259516283397496007720456241912787767471874766",
    "1"
  ],
  "pi_b": [
    [
      "8984932834431186885081739018602787205251764389622276378840584911253378292655",
      "13915347205867510139954212073616170215113174233909583119308631440705727956323"
    ],
    [
      "17106800871295249206033558077328296732761085655066319251101842033327705950077",
      "1676331377654999312066417811176540866598618209881449932289255596958569240706"
    ],
    [
      "1",
      "0"
    ]
  ],
  "pi_c": [
    "18080940349090461470390972095840262712653352551251311862413340259660020943585",
    "15552884864869620474420000381273365683624440806782082649431275219577871150965",
    "1"
  ]
        }
      "#.to_string())
          .to_proof();
        let public_signals = PublicSignals::from_json(r#"
        ["20388266962477619280955594249251406720204293349834576016913359427421275505103", "1339890304044742027429010851739224546875848706266241438396166916283259958606", "7254881883587024613198462950057173092645512092889456782445282935191059110173", "7254881883587024613198462950057173092645512092889456782445282935191059110173", "0"]
      "#.to_string());
        let res = v.verify_proof(proof, &public_signals.get());
        println!("res: {}", res);
        assert!(res);
    }
}